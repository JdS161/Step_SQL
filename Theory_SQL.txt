------------------------------------------------------------------------------------------------------------------
--------------------------------------- ТЕОРИЯ БАЗ ДАННЫХ --------------------------------------------------------
------------------------------------------------------------------------------------------------------------------

									Введение в базы данных

	База данных(DataBase) - это упорядоченный набор данных, хранящийся по определенным правилам. 
	Для работы с базой данных нужна, так называемая, Система Управеления Базами Данных (СУБД) DataBse Management System (DBMS).
	
	Существует множество разных СУБД (DBMS). Их можно разделить на:
		
		1. Персональные (однопользовательские) MS Access, Firebird...
		2. Серверные MySQL, MS SQL Swrver, PostgreSQL, MongoDB...
		
	Также все СУБД можно разделить наЖ
		
		1. Реляционные
		2. Не реляционные


	Каждая СУБД поддерживает или реализует определенную модель данных.
	
		1. Файловая модель. 		Представляет собой набор несвязанных файлов.
		2. Иерархическая модель.	Представляет собой иерархию узлов (как в бинарном дереве). 
		3. Сетевая модель данных
		4. Реляционная модель данных. В Реляцеонной моедли данных данные представлены в виде связанных между собой таблиц.
			Реляционная модель была предложена Эдгаром Коддом (Edgar Codd) в 1970г
		5. Не реляционная модель.
		6. Объектная модель данных. Представляет собой множество связанных между собой объектов
		
		
		
									РЕЛЯЦИОННАЯ МОДЕЛЬ ДАННЫХ
									
		Relation (Отношение) - это ключвое понятие реляционной модели данных. 
		Отношением называют таблицу.
		Отношение (таблица) состоит из полей(столбцов) и записей (строк).
		Поля еще называют атрибутами таблицы.
		Набор атрибутов с указанием их типов данных - называют схемой отношения
		
													
										П	О 	Л	Я (А Т Р И Б У Т Ы)
					 ____________________________________________________________
				З	|___________|_____________|___________|__________|___________|
				А	|___________|_____________|___________|__________|___________|
				П	|___________|_____________|___________|__________|___________|
				И	|___________|_____________|___________|__________|___________|
				С	|___________|_____________|___________|__________|___________|
				И	|___________|_____________|___________|__________|___________|
					|___________|_____________|___________|__________|___________|
					|___________|_____________|___________|__________|___________|
					|___________|_____________|___________|__________|___________|
					|___________|_____________|___________|__________|___________|
		
		
		

		 ___________ _____________ 
		|           |			  |
		|___________|_____________|
		|           |             |
		|___________|_____________|
		|           |             |
		|___________|_____________|
		|           |             |
		|___________|_____________|		
		
		
		
		
		
		Множество схем отношения, и связей между ними называют СХЕМОЙ БАЗЫ ДАННЫХ.
		
		Очень выжным в людом ОТНОШЕНИИ является УНИКАЛЬНОСТЬ. Т.е. каждая запись в таблице должна быть уникальной.
		Для обеспечения требований уникальности в каждой таблице должно быть КЛЮЧЕВОЕ ПОЛЕ (КЛЮЧЕВОЙ АТРИБУТ) или же ПЕРВИЧНЫЙ КЛЮЧ (PRIMARY KEY).
		И даже если все атрибуты в какиз-то 2х записях будут повторяться, то по ключевому полю они обязательно будут отличаться.
		
		Первичный ключ может быть ПРОСТЫМ - состоять из одного атрибута, или же СОСТАВНЫМ - состоять из нескольких атрибутов.
		В составном ключе уникальным является именно набор из всех атрибутов, а не каждый атрибут по отдельности.
		Ключ может быть ЕСТЕСТВЕННЫМ, если он хранит какую-то полезную информацию, или же ИСКУСТВЕННЫМ, когда его основная цель - лишь обеспечение уникальности.
		Искуственные ключи не хранят какой-либо полезной информации.
		
		Ключевое поле может быть абсолютно любого типа (текстовый, дата-время, и т.д.), но лучше всего использовать целочисленные искуственные ключи,
		поскольку они обеспечивают наибольшее быстродействие базы данных.
		
		В ключах важна производительность операций сравнения, и наибольшую производительость здесь показывают целые числа, поскольку они имеют аппаратную поддержку, и их сравнение всегда осуществляется за константное время.
		
		
		
		
		
		
		
		Числовые типы делятся на:
		ТОЧНЫЕ. Точными являются целочисленные типы,
		ПРИБЛИЗИТЕЛЬНЫЕ. дробные типы
		
		Целочисленные (точные) числа бывают: 
			tinyint - единственный беззнаковый тип данных.
			
			
			------------------------------------------------------------------------------------------------------------------------------------
			--------------------------------------------------------НОРМАЛИЗАЦИЯ ДАННЫХ---------------------------------------------------------
			------------------------------------------------------------------------------------------------------------------------------------
			ВСе данные в базе должны храниться в нормализованном виде. Для этого существуют нормальные формы.
			Их всего 5 + нормальная форма Boice-Codd.
			
			Нормальные формы устраняют аномалии связанные с добавлением, обновлением и удалением данных, а также устраняют избыточность данных.
			
			Абсолютно любое значение в базе данных должно храниться ИСКЛЮЧИТЕЛЬНО в одном месте в этой базе данных. Это экономит память, а также предотвращает необнозначность данных, хранящихся в базе. 
			Такую избыточность и неоднозначность и устраняет нормализация.
			
			
			------------------------------------------------------1-Я НОРМАЛЬНАЯ ФОРМА----------------------------------------------------------
			
			Согласно 1й нормальной формы каждое поле каждой таблицы должно хранить атомарное (неделимое) значение.
			
			
			------------------------------------------------------2-Я НОРМАЛЬНАЯ ФОРМА----------------------------------------------------------
			
			Отношение находится во 2й нормальной форме только в том случчае, когда отношение нахоится в 1й нормальной форме, и каждый неключевой атрибут зависит от первичного ключа.
			
			
			
			TODO: Специализацию переназначить со студентов на группы
			
			
			
			SQL
			
			Для работы с данными в базе данных нужен язык запросов SQL ( Structed Query Language).
			Его условно можно разделить на 2 языка:
			
			* DDL - Data Defenition Lanuage (Язык определения данных)
			* DML - Data Manipulatio Language (Язык манипулирования данными)
			
			
			DDL определяет структуру данных в бвзе, т.е. набор таблиц, и взаимосвязи между этими таблицами. 
			
				Включает в себя такие команды как:
					CREATE
					ALTER
					DROP
			
			DML:
					SELECT
					INSERT
					UPDATE
					DELETE
			
			
			------------------------------------------------------------------------------------------------------------------------------------
			-------------------------------------------------------ФУНКЦИИ АГРЕГИРОВАНИЯ--------------------------------------------------------
			------------------------------------------------------------------------------------------------------------------------------------
				
				ФУНКЦИИ АГРЕГИРОВАНИЯ - позволяют производить вычисления над выбранными данными.
				
			К функциям агрегирования относятся:
				- COUNT - считает количество вхождений
				- SUM	- суммирует выбранные значения
				- AVG	- вычисляет среднее арифметическое выбранных значений
				- MIN	- находит минимальное значение среди выбранных
				- MAX	- находит максимальное значение среди выбранных
			
			Все функции агрегирования используются с оператором SELECT.
			
			
			С функциями агрегирования достаточно часто применяют группировку с оператором GROUP BY.
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			квадратные скобки в математических уравнениях
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			